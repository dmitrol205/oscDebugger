name: Python build prerelease
on: [workflow_dispatch]
env:
  version: 'v0.1.1-dev'
#on:
#  push:
#    branches: [ $default-branch ]
jobs:
  prepare:
    runs-on: [ubuntu-latest, macos-latest, windows-latest]
    outputs:
      url: ${{ steps.create_release.outputs.upload_url }}
      id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.version }} python build
          draft: true
          prerelease: true
      #- name: save link
      #  run: echo "${{ steps.create_release.outputs.upload_url }}">./link.txt
      #- name: check link
      #  run: type ./link.txt
      #- name: store upload link
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: my-artifact
      #    path: ./link.txt
  build:
    needs: [prepare]
    runs-on: [windows-latest]
    #runs-on: ${{ matrix.os }}
    #strategy:
      #matrix:
        #os: [windows-latest]
        #python-version: [3.6]
        #exclude:
        #  - os: windows-latest
        #    python-version: 3.6
    strategy:
      matrix:
        arch: ['x64','x86']
    steps:
      - name: Download project
        uses: actions/checkout@v2
      - name: Set up Python 3.6.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.6.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: ${{ matrix.arch }}
      - name: Retrieve python version
        id: py
        run: echo ::set-output name=version::$(python -c "import sys;print(sys.version.split()[0])")
      - name: Update pip
        run: pip install --upgrade pip
      - name: Load libs
        run: pip install -r requirements.txt
      - name: Build
        run: pyinstaller --distpath ./ -F oscTest.py
      #- name: rename file
      #  run: rename "./oscTest.exe" "./debugger_${{ matrix.arch }}cp${{ steps.py.outputs.version }}.exe"
      #- name: download upload link
      #  uses: actions/download-artifact@v2
      #  with:
      #    name: my-artifact
      #- name: load link
      #  id: link
      #  run: echo "::set-output name=url::$(type ./link.txt)"
      #- name: Display structure of downloaded files
      #  run: |
      #    dir
      #    cd
      #    type ./link.txt
      #  working-directory: ./
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./oscTest.exe
          asset_name: debugger_${{ matrix.arch }}cp${{ steps.py.outputs.version }}.exe
          asset_content_type: application/octet-stream

  publish:
    needs: [prepare,build]
    runs-on: any
    steps:
      - name: Publish release
        uses: StuYarrow/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          id: ${{ needs.prepare.outputs.id }}
